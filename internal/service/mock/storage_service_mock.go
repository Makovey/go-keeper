// Code generated by MockGen. DO NOT EDIT.
// Source: server.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/Makovey/go-keeper/internal/transport/grpc/model"
	gomock "github.com/golang/mock/gomock"
)

// MockServiceStorage is a mock of ServiceStorage interface.
type MockServiceStorage struct {
	ctrl     *gomock.Controller
	recorder *MockServiceStorageMockRecorder
}

// MockServiceStorageMockRecorder is the mock recorder for MockServiceStorage.
type MockServiceStorageMockRecorder struct {
	mock *MockServiceStorage
}

// NewMockServiceStorage creates a new mock instance.
func NewMockServiceStorage(ctrl *gomock.Controller) *MockServiceStorage {
	mock := &MockServiceStorage{ctrl: ctrl}
	mock.recorder = &MockServiceStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceStorage) EXPECT() *MockServiceStorageMockRecorder {
	return m.recorder
}

// UploadFile mocks base method.
func (m *MockServiceStorage) UploadFile(ctx context.Context, file model.File, userID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFile", ctx, file, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadFile indicates an expected call of UploadFile.
func (mr *MockServiceStorageMockRecorder) UploadFile(ctx, file, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockServiceStorage)(nil).UploadFile), ctx, file, userID)
}
