// Code generated by MockGen. DO NOT EDIT.
// Source: dir_manager.go

// Package mock is a generated GoMock package.
package mock

import (
	os "os"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDirManager is a mock of DirManager interface.
type MockDirManager struct {
	ctrl     *gomock.Controller
	recorder *MockDirManagerMockRecorder
}

// MockDirManagerMockRecorder is the mock recorder for MockDirManager.
type MockDirManagerMockRecorder struct {
	mock *MockDirManager
}

// NewMockDirManager creates a new mock instance.
func NewMockDirManager(ctrl *gomock.Controller) *MockDirManager {
	mock := &MockDirManager{ctrl: ctrl}
	mock.recorder = &MockDirManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDirManager) EXPECT() *MockDirManagerMockRecorder {
	return m.recorder
}

// CreateDir mocks base method.
func (m *MockDirManager) CreateDir(rootDir, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDir", rootDir, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDir indicates an expected call of CreateDir.
func (mr *MockDirManagerMockRecorder) CreateDir(rootDir, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDir", reflect.TypeOf((*MockDirManager)(nil).CreateDir), rootDir, path)
}

// CreateFile mocks base method.
func (m *MockDirManager) CreateFile(name string) (*os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFile", name)
	ret0, _ := ret[0].(*os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFile indicates an expected call of CreateFile.
func (mr *MockDirManagerMockRecorder) CreateFile(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFile", reflect.TypeOf((*MockDirManager)(nil).CreateFile), name)
}

// ReadFile mocks base method.
func (m *MockDirManager) ReadFile(name string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFile", name)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFile indicates an expected call of ReadFile.
func (mr *MockDirManagerMockRecorder) ReadFile(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFile", reflect.TypeOf((*MockDirManager)(nil).ReadFile), name)
}

// RemoveFile mocks base method.
func (m *MockDirManager) RemoveFile(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFile", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFile indicates an expected call of RemoveFile.
func (mr *MockDirManagerMockRecorder) RemoveFile(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFile", reflect.TypeOf((*MockDirManager)(nil).RemoveFile), name)
}
